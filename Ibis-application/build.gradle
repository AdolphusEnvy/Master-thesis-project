plugins {
    id 'groovy'
    id 'java'
    id 'cpp'
}

group 'org.esci.sagecal'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}
sourceSets {
    main {
        java {
            srcDirs 'src'
        }
    }
}
dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.11'
    compile 'nl.junglecomputing.ipl:ipl:2.3.3'
    compile 'nl.junglecomputing.ipl:ibis-util:2.3.3'
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'nl.junglecomputing.ipl:ipl-impl-smartsockets:2.3.3'
    compile 'nl.junglecomputing.ipl:ipl-support:2.3.3'
    compile 'org.slf4j:slf4j-log4j12:1.7.2'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}
task copyDeps(type: Copy) {
    def destination = project.file("$rootDir/lib")

    from(configurations.runtime)
    into destination
    eachFile {
        if (it.getRelativePath().getFile(destination).exists()) {
            it.exclude()
        }
    }
}
compileJava.doLast {
    javaexec {
        main = 'ibis.compile.Ibisc'
        classpath = sourceSets.main.runtimeClasspath
        workingDir = "$buildDir/classes/java/main"
        args = [ "." ]
    }
    copy {
        from("$buildDir/classes/java/main/Driver.class")
        into("src/main/cpp")
    }
        exec {
            //dependsOn compileJava
            workingDir "src/main/cpp"
            commandLine "make"

            standardOutput = new ByteArrayOutputStream()

            //extension method stopTomcat.output() can be used to obtain the output:
            ext.output = {
                return standardOutput.toString()
            }
        }
    copy {
        from("src/main/cpp/libDriver.so")
        into("/lib")
    }
}
//compileJava.finalizedBy cppCompile
//task cppCompile (type: Exec){
//    dependsOn compileJava
//    workingDir "src/main/cpp"
//    commandLine "make"
//
//    standardOutput = new ByteArrayOutputStream()
//
//    //extension method stopTomcat.output() can be used to obtain the output:
//    ext.output = {
//        return standardOutput.toString()
//    }
//}
//project.gradle.buildFinished {
//    cppCompile
//    println "build finished"
//}
//clean.finalizedBy(cppCompile)
defaultTasks 'clean', 'copyDeps', 'assemble'