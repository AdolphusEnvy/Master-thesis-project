plugins {
    id 'java'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.0'
}

//group 'nl.esci'
//version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.11'
    compile 'nl.junglecomputing.ipl:ipl:2.3.3'
    compile 'nl.junglecomputing.ipl:ibis-util:2.3.3'
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'nl.junglecomputing.ipl:ipl-impl-smartsockets:2.3.3'
    compile 'nl.junglecomputing.ipl:ipl-support:2.3.3'
    compile 'org.slf4j:slf4j-log4j12:1.7.2'
    compile group: 'nl.esciencecenter.xenon', name: 'xenon', version: '3.1.0'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
    compile "com.github.kevinsawicki:http-request:6.0"
    compile group: 'org.json', name: 'json', version: '20190722'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.7.2'
    // https://mvnrepository.com/artifact/org.mapdb/mapdb
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: '1.3.71'
    compile group: 'org.mapdb', name: 'mapdb', version: '3.0.8'

}
task copyDeps(type: Copy) {
    def destination = project.file("$rootDir/lib")

    from(configurations.runtime)
    into destination
    eachFile {
        if (it.getRelativePath().getFile(destination).exists()) {
            it.exclude()
        }
    }
}
compileJava.doLast {
    javaexec {
        main = 'ibis.compile.Ibisc'
        classpath = sourceSets.main.runtimeClasspath
        workingDir = "$buildDir/classes/java/main"
        args = [ "." ]
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
version = "0.3.1"
javadoc {
    include 'nl/example/you/*'
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

tasks.withType(Jar) {
    destinationDir = file("$rootDir/lib")
}

task copyRuntimeLibs(type: Copy) {
    into "lib"
    from configurations.runtime
}


defaultTasks 'clean', 'copyDeps', 'assemble'